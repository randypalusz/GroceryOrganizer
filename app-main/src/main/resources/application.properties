spring.application.name=Bootstrap Spring Boot

# creates the database if it doesn't exist
spring.datasource.url=${MYSQL_URL:jdbc:mysql://localhost:3306/test?createDatabaseIfNotExist=true}
spring.datasource.username=test_user
spring.datasource.password=test1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/orm/jpa/vendor/Database.html
spring.jpa.database=MYSQL
# logs sql statements to STDOUT
spring.jpa.show-sql=false
# enables automatic schema creation based on the Entities created
spring.jpa.generate-ddl=true
# https://spring.io/guides/gs/accessing-data-mysql/
# spring.jpa.hibernate.ddl-auto=create
# https://docs.jboss.org/hibernate/orm/3.5/javadocs/org/hibernate/dialect/MySQL5Dialect.html
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
# Determines the physical column/table names
# https://docs.jboss.org/hibernate/orm/3.5/api/org/hibernate/cfg/NamingStrategy.html
spring.jpa.hibernate.naming_strategy = org.hibernate.cfg.ImprovedNamingStrategy

spring.thymeleaf.enabled=true
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# controls error info seen when making an API call
server.error.include-message = always
server.error.include-ginding-errors = always
server.error.include-stacktrace = always
server.error.include-exception = false

# set the port
server.port=${SERVER_PORT:8080}